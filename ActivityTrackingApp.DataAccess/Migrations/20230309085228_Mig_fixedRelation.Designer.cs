// <auto-generated />
using System;
using ActivityTrackingApp.DataAccess.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ActivityTrackingApp.DataAccess.Migrations
{
    [DbContext(typeof(ActivityTrackingDbContext))]
    [Migration("20230309085228_Mig_fixedRelation")]
    partial class Mig_fixedRelation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ActivityTrackingApp.Entities.Concrete.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Education")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActived")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TokenExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("updatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("AppUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            Age = 30,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "Sakarya",
                            Education = "Üniversite",
                            Email = "kaan@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Kaan Berat",
                            IsActived = true,
                            LastName = "Tokat",
                            PasswordHash = new byte[] { 109, 235, 250, 117, 193, 70, 14, 57, 160, 48, 20, 246, 95, 101, 87, 199, 221, 252, 218, 128, 130, 140, 4, 233, 195, 245, 58, 201, 112, 53, 200, 80, 28, 84, 231, 149, 143, 82, 205, 113, 151, 238, 92, 25, 184, 21, 227, 14, 126, 6, 62, 112, 224, 242, 63, 251, 223, 39, 178, 136, 196, 36, 130, 206 },
                            PasswordSalt = new byte[] { 111, 122, 192, 191, 229, 142, 113, 133, 68, 203, 145, 132, 158, 35, 100, 53, 106, 180, 129, 53, 209, 183, 130, 23, 9, 14, 173, 250, 43, 80, 140, 19, 14, 16, 170, 167, 173, 157, 154, 94, 254, 203, 211, 213, 46, 143, 56, 233, 45, 37, 107, 25, 118, 166, 205, 93, 228, 199, 42, 207, 75, 85, 57, 247, 244, 28, 201, 251, 106, 2, 108, 172, 9, 131, 26, 113, 167, 81, 101, 128, 165, 1, 38, 134, 72, 241, 86, 229, 70, 166, 131, 45, 1, 21, 192, 128, 148, 215, 76, 30, 74, 157, 78, 145, 123, 46, 109, 119, 59, 79, 221, 146, 33, 31, 66, 155, 250, 6, 74, 103, 184, 155, 237, 69, 53, 92, 144, 168 },
                            Phone = "05348952284",
                            PhoneNumberConfirmed = true,
                            Role = "User",
                            Tc = "31112554896",
                            TokenExpiryDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            createdDate = new DateTime(2023, 3, 9, 11, 52, 28, 304, DateTimeKind.Local).AddTicks(7545)
                        });
                });

            modelBuilder.Entity("ActivityTrackingApp.Entities.Concrete.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("EventTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("updatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EventTypeId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("ActivityTrackingApp.Entities.Concrete.EventTopic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("updatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("EventTopics");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Aksiyon",
                            createdDate = new DateTime(2023, 3, 9, 11, 52, 28, 304, DateTimeKind.Local).AddTicks(7307)
                        },
                        new
                        {
                            Id = 2,
                            Name = "Bilim-Kurgu",
                            createdDate = new DateTime(2023, 3, 9, 11, 52, 28, 304, DateTimeKind.Local).AddTicks(7318)
                        });
                });

            modelBuilder.Entity("ActivityTrackingApp.Entities.Concrete.EventType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("updatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("EventTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Okuma",
                            createdDate = new DateTime(2023, 3, 9, 11, 52, 28, 304, DateTimeKind.Local).AddTicks(7459)
                        },
                        new
                        {
                            Id = 2,
                            Name = "Dinleme",
                            createdDate = new DateTime(2023, 3, 9, 11, 52, 28, 304, DateTimeKind.Local).AddTicks(7460)
                        });
                });

            modelBuilder.Entity("ActivityTrackingApp.Entities.Concrete.UserActivities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("EventTopicId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FinishDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("updatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("EventId");

                    b.HasIndex("EventTopicId");

                    b.ToTable("UserActivities");
                });

            modelBuilder.Entity("ActivityTrackingApp.Entities.Concrete.Event", b =>
                {
                    b.HasOne("ActivityTrackingApp.Entities.Concrete.EventType", "EventType")
                        .WithMany()
                        .HasForeignKey("EventTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("ActivityTrackingApp.Entities.Concrete.UserActivities", b =>
                {
                    b.HasOne("ActivityTrackingApp.Entities.Concrete.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ActivityTrackingApp.Entities.Concrete.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ActivityTrackingApp.Entities.Concrete.EventTopic", "EventTopic")
                        .WithMany()
                        .HasForeignKey("EventTopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Event");

                    b.Navigation("EventTopic");
                });
#pragma warning restore 612, 618
        }
    }
}
